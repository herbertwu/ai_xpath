package org.brx.ai;

import org.brx.ai.xpath.LLMXpathGenerator;
import org.openqa.selenium.By;
import org.openqa.selenium.SearchContext;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

public class LLMElementFinder {
	private final WebDriver driver;
	private final LLMXpathGenerator aiXpathGenerator;
	 public static void main(String[] args) {
	        System.out.println("This is demo code.");
	 }

	public LLMElementFinder(WebDriver driver, LLMXpathGenerator aiXpathGenerator){
		this.driver = driver;
		this.aiXpathGenerator = aiXpathGenerator;
	}


	public WebElement findElement(String elementDescription) {
		String pageSource = getPageHtmlSource();
		return findElementByDescriptionAndHtmlSource(elementDescription,pageSource);
	} 
	
	public WebElement findElement(String elementDescription, WebElement contextElement) {
		String elementSource = getElementHtmlSource(contextElement);
		return findElementByDescriptionAndHtmlSource(elementDescription,elementSource);
		
	} 
	
	private WebElement findElementByDescriptionAndHtmlSource(String elementDescription,String htmlSource) {
		String xpath = aiXpathGenerator.generateRelativeXpath(htmlSource, elementDescription);
		try {
		     return driver.findElement(By.xpath(xpath));
		} catch (Exception e) {
			throw new RuntimeException("{"+xpath +"} xpath generated by AI is not valid ",e);
		}
	}

	private String getPageHtmlSource() {
		return driver.getPageSource();
	}

	private String getElementHtmlSource(SearchContext context) {
		WebElement contextElement = (WebElement)context;
		return contextElement.getAttribute("innerHTML");
	}

}
